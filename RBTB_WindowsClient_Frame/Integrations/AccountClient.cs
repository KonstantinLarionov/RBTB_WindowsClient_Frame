using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using Newtonsoft.Json.Linq;

namespace RBTB_WindowsClient_Frame.Integrations
{
	//----------------------
	// <auto-generated>
	//     Generated using the NSwag toolchain v13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
	// </auto-generated>
	//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

	namespace MyNamespace
	{
		using System = global::System;

		[System.CodeDom.Compiler.GeneratedCode( "NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))" )]
		public partial class AccountClient
		{
			private string _baseUrl = "";
			private System.Net.Http.HttpClient _httpClient;
			private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

			public AccountClient( string baseUrl, System.Net.Http.HttpClient httpClient )
			{
				BaseUrl = baseUrl;
				_httpClient = httpClient;
				_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>( CreateSerializerSettings );
			}

			private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
			{
				var settings = new Newtonsoft.Json.JsonSerializerSettings();
				UpdateJsonSerializerSettings( settings );
				return settings;
			}

			public string BaseUrl
			{
				get { return _baseUrl; }
				set { _baseUrl = value; }
			}

			protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

			partial void UpdateJsonSerializerSettings( Newtonsoft.Json.JsonSerializerSettings settings );

			partial void PrepareRequest( System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url );
			partial void PrepareRequest( System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder );
			partial void ProcessResponse( System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response );

			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual System.Threading.Tasks.Task<GetPositionsResponse> PositionsAsync( System.Guid? userId, Side? side, PositionStatus? positionStatus, string symbol )
			{
				return PositionsAsync( userId, side, positionStatus, symbol, System.Threading.CancellationToken.None );
			}

			/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual async System.Threading.Tasks.Task<GetPositionsResponse> PositionsAsync( System.Guid? userId, Side? side, PositionStatus? positionStatus, string symbol, System.Threading.CancellationToken cancellationToken )
			{
				var urlBuilder_ = new System.Text.StringBuilder();
				urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/positions?" );
				if ( userId != null )
				{
					urlBuilder_.Append( System.Uri.EscapeDataString( "UserId" ) + "=" ).Append( System.Uri.EscapeDataString( ConvertToString( userId, System.Globalization.CultureInfo.InvariantCulture ) ) ).Append( "&" );
				}
				if ( side != null )
				{
					urlBuilder_.Append( System.Uri.EscapeDataString( "Side" ) + "=" ).Append( System.Uri.EscapeDataString( ConvertToString( side, System.Globalization.CultureInfo.InvariantCulture ) ) ).Append( "&" );
				}
				if ( positionStatus != null )
				{
					urlBuilder_.Append( System.Uri.EscapeDataString( "PositionStatus" ) + "=" ).Append( System.Uri.EscapeDataString( ConvertToString( positionStatus, System.Globalization.CultureInfo.InvariantCulture ) ) ).Append( "&" );
				}
				if ( symbol != null )
				{
					urlBuilder_.Append( System.Uri.EscapeDataString( "Symbol" ) + "=" ).Append( System.Uri.EscapeDataString( ConvertToString( symbol, System.Globalization.CultureInfo.InvariantCulture ) ) ).Append( "&" );
				}
				urlBuilder_.Length--;

				var client_ = _httpClient;
				var disposeClient_ = false;
				try
				{
					using ( var request_ = new System.Net.Http.HttpRequestMessage() )
					{
						request_.Method = new System.Net.Http.HttpMethod( "GET" );
						request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "application/json" ) );

						PrepareRequest( client_, request_, urlBuilder_ );

						var url_ = urlBuilder_.ToString();
						request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

						PrepareRequest( client_, request_, url_ );

						var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
						var disposeResponse_ = true;
						try
						{
							var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
							if ( response_.Content != null && response_.Content.Headers != null )
							{
								foreach ( var item_ in response_.Content.Headers )
									headers_[item_.Key] = item_.Value;
							}

							ProcessResponse( client_, response_ );

							var status_ = (int)response_.StatusCode;
							if ( status_ == 200 )
							{
								var objectResponse_ = await ReadObjectResponseAsync<GetPositionsResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
								if ( objectResponse_.Object == null )
								{
									throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
								}
								return objectResponse_.Object;
							}
							else
							if ( status_ == 400 )
							{
								var objectResponse_ = await ReadObjectResponseAsync<GetPositionsResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
								if ( objectResponse_.Object == null )
								{
									throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
								}
								throw new ApiException<GetPositionsResponse>( "Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null );
							}
							else
							{
								var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
								throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
							}
						}
						finally
						{
							if ( disposeResponse_ )
								response_.Dispose();
						}
					}
				}
				finally
				{
					if ( disposeClient_ )
						client_.Dispose();
				}
			}

			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual System.Threading.Tasks.Task<GetPositionByIdResponse> Positions2Async( System.Guid positionId )
			{
				return Positions2Async( positionId, System.Threading.CancellationToken.None );
			}

			/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual async System.Threading.Tasks.Task<GetPositionByIdResponse> Positions2Async( System.Guid positionId, System.Threading.CancellationToken cancellationToken )
			{
				if ( positionId == null )
					throw new System.ArgumentNullException( "positionId" );

				var urlBuilder_ = new System.Text.StringBuilder();
				urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/positions/{positionId}" );
				urlBuilder_.Replace( "{positionId}", System.Uri.EscapeDataString( ConvertToString( positionId, System.Globalization.CultureInfo.InvariantCulture ) ) );

				var client_ = _httpClient;
				var disposeClient_ = false;
				try
				{
					using ( var request_ = new System.Net.Http.HttpRequestMessage() )
					{
						request_.Method = new System.Net.Http.HttpMethod( "GET" );
						request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "application/json" ) );

						PrepareRequest( client_, request_, urlBuilder_ );

						var url_ = urlBuilder_.ToString();
						request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

						PrepareRequest( client_, request_, url_ );

						var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
						var disposeResponse_ = true;
						try
						{
							var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
							if ( response_.Content != null && response_.Content.Headers != null )
							{
								foreach ( var item_ in response_.Content.Headers )
									headers_[item_.Key] = item_.Value;
							}

							ProcessResponse( client_, response_ );

							var status_ = (int)response_.StatusCode;
							if ( status_ == 200 )
							{
								var objectResponse_ = await ReadObjectResponseAsync<GetPositionByIdResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
								if ( objectResponse_.Object == null )
								{
									throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
								}
								return objectResponse_.Object;
							}
							else
							if ( status_ == 400 )
							{
								var objectResponse_ = await ReadObjectResponseAsync<GetPositionByIdResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
								if ( objectResponse_.Object == null )
								{
									throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
								}
								throw new ApiException<GetPositionByIdResponse>( "Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null );
							}
							else
							{
								var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
								throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
							}
						}
						finally
						{
							if ( disposeResponse_ )
								response_.Dispose();
						}
					}
				}
				finally
				{
					if ( disposeClient_ )
						client_.Dispose();
				}
			}

			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual System.Threading.Tasks.Task<CreatePositionResponse> CreateAsync( CreatePositionRequest body )
			{
				return CreateAsync( body, System.Threading.CancellationToken.None );
			}

			/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual async System.Threading.Tasks.Task<CreatePositionResponse> CreateAsync( CreatePositionRequest body, System.Threading.CancellationToken cancellationToken )
			{
				var urlBuilder_ = new System.Text.StringBuilder();
				urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/positions/create" );

				var client_ = _httpClient;
				var disposeClient_ = false;
				try
				{
					using ( var request_ = new System.Net.Http.HttpRequestMessage() )
					{
						var json_ = Newtonsoft.Json.JsonConvert.SerializeObject( body, _settings.Value );
						var content_ = new System.Net.Http.StringContent( json_ );
						content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse( "application/json" );
						request_.Content = content_;
						request_.Method = new System.Net.Http.HttpMethod( "POST" );
						request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "application/json" ) );

						PrepareRequest( client_, request_, urlBuilder_ );

						var url_ = urlBuilder_.ToString();
						request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

						PrepareRequest( client_, request_, url_ );

						var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
						var disposeResponse_ = true;
						try
						{
							var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
							if ( response_.Content != null && response_.Content.Headers != null )
							{
								foreach ( var item_ in response_.Content.Headers )
									headers_[item_.Key] = item_.Value;
							}

							ProcessResponse( client_, response_ );

							var status_ = (int)response_.StatusCode;
							if ( status_ == 200 )
							{
								var objectResponse_ = await ReadObjectResponseAsync<CreatePositionResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
								if ( objectResponse_.Object == null )
								{
									throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
								}
								return objectResponse_.Object;
							}
							else
							if ( status_ == 400 )
							{
								var objectResponse_ = await ReadObjectResponseAsync<CreatePositionResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
								if ( objectResponse_.Object == null )
								{
									throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
								}
								throw new ApiException<CreatePositionResponse>( "Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null );
							}
							else
							{
								var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
								throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
							}
						}
						finally
						{
							if ( disposeResponse_ )
								response_.Dispose();
						}
					}
				}
				finally
				{
					if ( disposeClient_ )
						client_.Dispose();
				}
			}

			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual System.Threading.Tasks.Task<UpdatePositionResponse> UpdateAsync( UpdatePositionRequest body )
			{
				return UpdateAsync( body, System.Threading.CancellationToken.None );
			}

			/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual async System.Threading.Tasks.Task<UpdatePositionResponse> UpdateAsync( UpdatePositionRequest body, System.Threading.CancellationToken cancellationToken )
			{
				var urlBuilder_ = new System.Text.StringBuilder();
				urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/positions/update" );

				var client_ = _httpClient;
				var disposeClient_ = false;
				try
				{
					using ( var request_ = new System.Net.Http.HttpRequestMessage() )
					{
						var json_ = Newtonsoft.Json.JsonConvert.SerializeObject( body, _settings.Value );
						var content_ = new System.Net.Http.StringContent( json_ );
						content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse( "application/json" );
						request_.Content = content_;
						request_.Method = new System.Net.Http.HttpMethod( "PUT" );
						request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "application/json" ) );

						PrepareRequest( client_, request_, urlBuilder_ );

						var url_ = urlBuilder_.ToString();
						request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

						PrepareRequest( client_, request_, url_ );

						var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
						var disposeResponse_ = true;
						try
						{
							var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
							if ( response_.Content != null && response_.Content.Headers != null )
							{
								foreach ( var item_ in response_.Content.Headers )
									headers_[item_.Key] = item_.Value;
							}

							ProcessResponse( client_, response_ );

							var status_ = (int)response_.StatusCode;
							if ( status_ == 200 )
							{
								var objectResponse_ = await ReadObjectResponseAsync<UpdatePositionResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
								if ( objectResponse_.Object == null )
								{
									throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
								}
								return objectResponse_.Object;
							}
							else
							if ( status_ == 400 )
							{
								var objectResponse_ = await ReadObjectResponseAsync<UpdatePositionResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
								if ( objectResponse_.Object == null )
								{
									throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
								}
								throw new ApiException<UpdatePositionResponse>( "Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null );
							}
							else
							{
								var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
								throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
							}
						}
						finally
						{
							if ( disposeResponse_ )
								response_.Dispose();
						}
					}
				}
				finally
				{
					if ( disposeClient_ )
						client_.Dispose();
				}
			}

			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual System.Threading.Tasks.Task<DeletePositionResponse> DeleteAsync( System.Guid positionId )
			{
				return DeleteAsync( positionId, System.Threading.CancellationToken.None );
			}

			/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual async System.Threading.Tasks.Task<DeletePositionResponse> DeleteAsync( System.Guid positionId, System.Threading.CancellationToken cancellationToken )
			{
				if ( positionId == null )
					throw new System.ArgumentNullException( "positionId" );

				var urlBuilder_ = new System.Text.StringBuilder();
				urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/positions/delete/{positionId}" );
				urlBuilder_.Replace( "{positionId}", System.Uri.EscapeDataString( ConvertToString( positionId, System.Globalization.CultureInfo.InvariantCulture ) ) );

				var client_ = _httpClient;
				var disposeClient_ = false;
				try
				{
					using ( var request_ = new System.Net.Http.HttpRequestMessage() )
					{
						request_.Method = new System.Net.Http.HttpMethod( "DELETE" );
						request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "application/json" ) );

						PrepareRequest( client_, request_, urlBuilder_ );

						var url_ = urlBuilder_.ToString();
						request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

						PrepareRequest( client_, request_, url_ );

						var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
						var disposeResponse_ = true;
						try
						{
							var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
							if ( response_.Content != null && response_.Content.Headers != null )
							{
								foreach ( var item_ in response_.Content.Headers )
									headers_[item_.Key] = item_.Value;
							}

							ProcessResponse( client_, response_ );

							var status_ = (int)response_.StatusCode;
							if ( status_ == 200 )
							{
								var objectResponse_ = await ReadObjectResponseAsync<DeletePositionResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
								if ( objectResponse_.Object == null )
								{
									throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
								}
								return objectResponse_.Object;
							}
							else
							if ( status_ == 400 )
							{
								var objectResponse_ = await ReadObjectResponseAsync<DeletePositionResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
								if ( objectResponse_.Object == null )
								{
									throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
								}
								throw new ApiException<DeletePositionResponse>( "Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null );
							}
							else
							{
								var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
								throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
							}
						}
						finally
						{
							if ( disposeResponse_ )
								response_.Dispose();
						}
					}
				}
				finally
				{
					if ( disposeClient_ )
						client_.Dispose();
				}
			}

			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual System.Threading.Tasks.Task<GetTradesResponse> TradesAsync( System.Guid? userId, OrderType? orderType, Side? side, string symbol, OrderStatus? orderStatus )
			{
				return TradesAsync( userId, orderType, side, symbol, orderStatus, System.Threading.CancellationToken.None );
			}

			/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual async System.Threading.Tasks.Task<GetTradesResponse> TradesAsync( System.Guid? userId, OrderType? orderType, Side? side, string symbol, OrderStatus? orderStatus, System.Threading.CancellationToken cancellationToken )
			{
				var urlBuilder_ = new System.Text.StringBuilder();
				urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/trades?" );
				if ( userId != null )
				{
					urlBuilder_.Append( System.Uri.EscapeDataString( "UserId" ) + "=" ).Append( System.Uri.EscapeDataString( ConvertToString( userId, System.Globalization.CultureInfo.InvariantCulture ) ) ).Append( "&" );
				}
				if ( orderType != null )
				{
					urlBuilder_.Append( System.Uri.EscapeDataString( "OrderType" ) + "=" ).Append( System.Uri.EscapeDataString( ConvertToString( orderType, System.Globalization.CultureInfo.InvariantCulture ) ) ).Append( "&" );
				}
				if ( side != null )
				{
					urlBuilder_.Append( System.Uri.EscapeDataString( "Side" ) + "=" ).Append( System.Uri.EscapeDataString( ConvertToString( side, System.Globalization.CultureInfo.InvariantCulture ) ) ).Append( "&" );
				}
				if ( symbol != null )
				{
					urlBuilder_.Append( System.Uri.EscapeDataString( "Symbol" ) + "=" ).Append( System.Uri.EscapeDataString( ConvertToString( symbol, System.Globalization.CultureInfo.InvariantCulture ) ) ).Append( "&" );
				}
				if ( orderStatus != null )
				{
					urlBuilder_.Append( System.Uri.EscapeDataString( "OrderStatus" ) + "=" ).Append( System.Uri.EscapeDataString( ConvertToString( orderStatus, System.Globalization.CultureInfo.InvariantCulture ) ) ).Append( "&" );
				}
				urlBuilder_.Length--;

				var client_ = _httpClient;
				var disposeClient_ = false;
				try
				{
					using ( var request_ = new System.Net.Http.HttpRequestMessage() )
					{
						request_.Method = new System.Net.Http.HttpMethod( "GET" );
						request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "application/json" ) );

						PrepareRequest( client_, request_, urlBuilder_ );

						var url_ = urlBuilder_.ToString();
						request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

						PrepareRequest( client_, request_, url_ );

						var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
						var disposeResponse_ = true;
						try
						{
							var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
							if ( response_.Content != null && response_.Content.Headers != null )
							{
								foreach ( var item_ in response_.Content.Headers )
									headers_[item_.Key] = item_.Value;
							}

							ProcessResponse( client_, response_ );

							var status_ = (int)response_.StatusCode;
							if ( status_ == 200 )
							{
								var objectResponse_ = await ReadObjectResponseAsync<GetTradesResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
								if ( objectResponse_.Object == null )
								{
									throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
								}
								return objectResponse_.Object;
							}
							else
							if ( status_ == 400 )
							{
								var objectResponse_ = await ReadObjectResponseAsync<GetTradesResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
								if ( objectResponse_.Object == null )
								{
									throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
								}
								throw new ApiException<GetTradesResponse>( "Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null );
							}
							else
							{
								var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
								throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
							}
						}
						finally
						{
							if ( disposeResponse_ )
								response_.Dispose();
						}
					}
				}
				finally
				{
					if ( disposeClient_ )
						client_.Dispose();
				}
			}

			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual System.Threading.Tasks.Task<GetTradeByIdResponse> Trades2Async( System.Guid tradeId )
			{
				return Trades2Async( tradeId, System.Threading.CancellationToken.None );
			}

			/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual async System.Threading.Tasks.Task<GetTradeByIdResponse> Trades2Async( System.Guid tradeId, System.Threading.CancellationToken cancellationToken )
			{
				if ( tradeId == null )
					throw new System.ArgumentNullException( "tradeId" );

				var urlBuilder_ = new System.Text.StringBuilder();
				urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/trades/{tradeId}" );
				urlBuilder_.Replace( "{tradeId}", System.Uri.EscapeDataString( ConvertToString( tradeId, System.Globalization.CultureInfo.InvariantCulture ) ) );

				var client_ = _httpClient;
				var disposeClient_ = false;
				try
				{
					using ( var request_ = new System.Net.Http.HttpRequestMessage() )
					{
						request_.Method = new System.Net.Http.HttpMethod( "GET" );
						request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "application/json" ) );

						PrepareRequest( client_, request_, urlBuilder_ );

						var url_ = urlBuilder_.ToString();
						request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

						PrepareRequest( client_, request_, url_ );

						var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
						var disposeResponse_ = true;
						try
						{
							var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
							if ( response_.Content != null && response_.Content.Headers != null )
							{
								foreach ( var item_ in response_.Content.Headers )
									headers_[item_.Key] = item_.Value;
							}

							ProcessResponse( client_, response_ );

							var status_ = (int)response_.StatusCode;
							if ( status_ == 200 )
							{
								var objectResponse_ = await ReadObjectResponseAsync<GetTradeByIdResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
								if ( objectResponse_.Object == null )
								{
									throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
								}
								return objectResponse_.Object;
							}
							else
							if ( status_ == 400 )
							{
								var objectResponse_ = await ReadObjectResponseAsync<GetTradeByIdResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
								if ( objectResponse_.Object == null )
								{
									throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
								}
								throw new ApiException<GetTradeByIdResponse>( "Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null );
							}
							else
							{
								var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
								throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
							}
						}
						finally
						{
							if ( disposeResponse_ )
								response_.Dispose();
						}
					}
				}
				finally
				{
					if ( disposeClient_ )
						client_.Dispose();
				}
			}

			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual System.Threading.Tasks.Task<CreateTradeResponse> Create2Async( CreateTradeRequest body )
			{
				return Create2Async( body, System.Threading.CancellationToken.None );
			}

			/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual async System.Threading.Tasks.Task<CreateTradeResponse> Create2Async( CreateTradeRequest body, System.Threading.CancellationToken cancellationToken )
			{
				var urlBuilder_ = new System.Text.StringBuilder();
				urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/trades/create" );

				var client_ = _httpClient;
				var disposeClient_ = false;
				try
				{
					using ( var request_ = new System.Net.Http.HttpRequestMessage() )
					{
						var json_ = Newtonsoft.Json.JsonConvert.SerializeObject( body, _settings.Value );
						var content_ = new System.Net.Http.StringContent( json_ );
						content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse( "application/json" );
						request_.Content = content_;
						request_.Method = new System.Net.Http.HttpMethod( "POST" );
						request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "application/json" ) );

						PrepareRequest( client_, request_, urlBuilder_ );

						var url_ = urlBuilder_.ToString();
						request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

						PrepareRequest( client_, request_, url_ );

						var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
						var disposeResponse_ = true;
						try
						{
							var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
							if ( response_.Content != null && response_.Content.Headers != null )
							{
								foreach ( var item_ in response_.Content.Headers )
									headers_[item_.Key] = item_.Value;
							}

							ProcessResponse( client_, response_ );

							var status_ = (int)response_.StatusCode;
							if ( status_ == 200 )
							{
								var objectResponse_ = await ReadObjectResponseAsync<CreateTradeResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
								if ( objectResponse_.Object == null )
								{
									throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
								}
								return objectResponse_.Object;
							}
							else
							if ( status_ == 400 )
							{
								var objectResponse_ = await ReadObjectResponseAsync<CreateTradeResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
								if ( objectResponse_.Object == null )
								{
									throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
								}
								throw new ApiException<CreateTradeResponse>( "Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null );
							}
							else
							{
								var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
								throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
							}
						}
						finally
						{
							if ( disposeResponse_ )
								response_.Dispose();
						}
					}
				}
				finally
				{
					if ( disposeClient_ )
						client_.Dispose();
				}
			}

			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual System.Threading.Tasks.Task<UpdateTradeResponse> Update2Async( UpdateTradeRequest body )
			{
				return Update2Async( body, System.Threading.CancellationToken.None );
			}

			/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual async System.Threading.Tasks.Task<UpdateTradeResponse> Update2Async( UpdateTradeRequest body, System.Threading.CancellationToken cancellationToken )
			{
				var urlBuilder_ = new System.Text.StringBuilder();
				urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/trades/update" );

				var client_ = _httpClient;
				var disposeClient_ = false;
				try
				{
					using ( var request_ = new System.Net.Http.HttpRequestMessage() )
					{
						var json_ = Newtonsoft.Json.JsonConvert.SerializeObject( body, _settings.Value );
						var content_ = new System.Net.Http.StringContent( json_ );
						content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse( "application/json" );
						request_.Content = content_;
						request_.Method = new System.Net.Http.HttpMethod( "PUT" );
						request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "application/json" ) );

						PrepareRequest( client_, request_, urlBuilder_ );

						var url_ = urlBuilder_.ToString();
						request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

						PrepareRequest( client_, request_, url_ );

						var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
						var disposeResponse_ = true;
						try
						{
							var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
							if ( response_.Content != null && response_.Content.Headers != null )
							{
								foreach ( var item_ in response_.Content.Headers )
									headers_[item_.Key] = item_.Value;
							}

							ProcessResponse( client_, response_ );

							var status_ = (int)response_.StatusCode;
							if ( status_ == 200 )
							{
								var objectResponse_ = await ReadObjectResponseAsync<UpdateTradeResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
								if ( objectResponse_.Object == null )
								{
									throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
								}
								return objectResponse_.Object;
							}
							else
							if ( status_ == 400 )
							{
								var objectResponse_ = await ReadObjectResponseAsync<UpdateTradeResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
								if ( objectResponse_.Object == null )
								{
									throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
								}
								throw new ApiException<UpdateTradeResponse>( "Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null );
							}
							else
							{
								var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
								throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
							}
						}
						finally
						{
							if ( disposeResponse_ )
								response_.Dispose();
						}
					}
				}
				finally
				{
					if ( disposeClient_ )
						client_.Dispose();
				}
			}

			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual System.Threading.Tasks.Task<DeleteTradeResponse> Delete2Async( System.Guid tradeId )
			{
				return Delete2Async( tradeId, System.Threading.CancellationToken.None );
			}

			/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual async System.Threading.Tasks.Task<DeleteTradeResponse> Delete2Async( System.Guid tradeId, System.Threading.CancellationToken cancellationToken )
			{
				if ( tradeId == null )
					throw new System.ArgumentNullException( "tradeId" );

				var urlBuilder_ = new System.Text.StringBuilder();
				urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/trades/delete/{tradeId}" );
				urlBuilder_.Replace( "{tradeId}", System.Uri.EscapeDataString( ConvertToString( tradeId, System.Globalization.CultureInfo.InvariantCulture ) ) );

				var client_ = _httpClient;
				var disposeClient_ = false;
				try
				{
					using ( var request_ = new System.Net.Http.HttpRequestMessage() )
					{
						request_.Method = new System.Net.Http.HttpMethod( "DELETE" );
						request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "application/json" ) );

						PrepareRequest( client_, request_, urlBuilder_ );

						var url_ = urlBuilder_.ToString();
						request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

						PrepareRequest( client_, request_, url_ );

						var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
						var disposeResponse_ = true;
						try
						{
							var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
							if ( response_.Content != null && response_.Content.Headers != null )
							{
								foreach ( var item_ in response_.Content.Headers )
									headers_[item_.Key] = item_.Value;
							}

							ProcessResponse( client_, response_ );

							var status_ = (int)response_.StatusCode;
							if ( status_ == 200 )
							{
								var objectResponse_ = await ReadObjectResponseAsync<DeleteTradeResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
								if ( objectResponse_.Object == null )
								{
									throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
								}
								return objectResponse_.Object;
							}
							else
							if ( status_ == 400 )
							{
								var objectResponse_ = await ReadObjectResponseAsync<DeleteTradeResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
								if ( objectResponse_.Object == null )
								{
									throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
								}
								throw new ApiException<DeleteTradeResponse>( "Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null );
							}
							else
							{
								var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
								throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
							}
						}
						finally
						{
							if ( disposeResponse_ )
								response_.Dispose();
						}
					}
				}
				finally
				{
					if ( disposeClient_ )
						client_.Dispose();
				}
			}

			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual System.Threading.Tasks.Task<GetUsersResponse> UsersAsync( GetUsersRequest request )
			{
				return UsersAsync( request, System.Threading.CancellationToken.None );
			}

			/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual async System.Threading.Tasks.Task<GetUsersResponse> UsersAsync( GetUsersRequest request, System.Threading.CancellationToken cancellationToken )
			{
				var urlBuilder_ = new System.Text.StringBuilder();
				urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/users?" );
				if ( request != null )
				{
					urlBuilder_.Append( System.Uri.EscapeDataString( "request" ) + "=" ).Append( System.Uri.EscapeDataString( ConvertToString( request, System.Globalization.CultureInfo.InvariantCulture ) ) ).Append( "&" );
				}
				urlBuilder_.Length--;

				var client_ = _httpClient;
				var disposeClient_ = false;
				try
				{
					using ( var request_ = new System.Net.Http.HttpRequestMessage() )
					{
						request_.Method = new System.Net.Http.HttpMethod( "GET" );
						request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "application/json" ) );

						PrepareRequest( client_, request_, urlBuilder_ );

						var url_ = urlBuilder_.ToString();
						request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

						PrepareRequest( client_, request_, url_ );

						var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
						var disposeResponse_ = true;
						try
						{
							var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
							if ( response_.Content != null && response_.Content.Headers != null )
							{
								foreach ( var item_ in response_.Content.Headers )
									headers_[item_.Key] = item_.Value;
							}

							ProcessResponse( client_, response_ );

							var status_ = (int)response_.StatusCode;
							if ( status_ == 200 )
							{
								var objectResponse_ = await ReadObjectResponseAsync<GetUsersResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
								if ( objectResponse_.Object == null )
								{
									throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
								}
								return objectResponse_.Object;
							}
							else
							if ( status_ == 400 )
							{
								var objectResponse_ = await ReadObjectResponseAsync<GetUsersResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
								if ( objectResponse_.Object == null )
								{
									throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
								}
								throw new ApiException<GetUsersResponse>( "Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null );
							}
							else
							{
								var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
								throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
							}
						}
						finally
						{
							if ( disposeResponse_ )
								response_.Dispose();
						}
					}
				}
				finally
				{
					if ( disposeClient_ )
						client_.Dispose();
				}
			}

			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual System.Threading.Tasks.Task<GetUserByIdResponse> Users2Async( System.Guid userId )
			{
				return Users2Async( userId, System.Threading.CancellationToken.None );
			}

			/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual async System.Threading.Tasks.Task<GetUserByIdResponse> Users2Async( System.Guid userId, System.Threading.CancellationToken cancellationToken )
			{
				if ( userId == null )
					throw new System.ArgumentNullException( "userId" );

				var urlBuilder_ = new System.Text.StringBuilder();
				urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/users/{userId}" );
				urlBuilder_.Replace( "{userId}", System.Uri.EscapeDataString( ConvertToString( userId, System.Globalization.CultureInfo.InvariantCulture ) ) );

				var client_ = _httpClient;
				var disposeClient_ = false;
				try
				{
					using ( var request_ = new System.Net.Http.HttpRequestMessage() )
					{
						request_.Method = new System.Net.Http.HttpMethod( "GET" );
						request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "application/json" ) );

						PrepareRequest( client_, request_, urlBuilder_ );

						var url_ = urlBuilder_.ToString();
						request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

						PrepareRequest( client_, request_, url_ );

						var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
						var disposeResponse_ = true;
						try
						{
							var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
							if ( response_.Content != null && response_.Content.Headers != null )
							{
								foreach ( var item_ in response_.Content.Headers )
									headers_[item_.Key] = item_.Value;
							}

							ProcessResponse( client_, response_ );

							var status_ = (int)response_.StatusCode;
							if ( status_ == 200 )
							{
								var objectResponse_ = await ReadObjectResponseAsync<GetUserByIdResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
								if ( objectResponse_.Object == null )
								{
									throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
								}
								return objectResponse_.Object;
							}
							else
							if ( status_ == 400 )
							{
								var objectResponse_ = await ReadObjectResponseAsync<GetUserByIdResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
								if ( objectResponse_.Object == null )
								{
									throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
								}
								throw new ApiException<GetUserByIdResponse>( "Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null );
							}
							else
							{
								var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
								throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
							}
						}
						finally
						{
							if ( disposeResponse_ )
								response_.Dispose();
						}
					}
				}
				finally
				{
					if ( disposeClient_ )
						client_.Dispose();
				}
			}

			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual System.Threading.Tasks.Task<CreateUserResponse> Create3Async( CreateUserRequest body )
			{
				return Create3Async( body, System.Threading.CancellationToken.None );
			}

			/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual async System.Threading.Tasks.Task<CreateUserResponse> Create3Async( CreateUserRequest body, System.Threading.CancellationToken cancellationToken )
			{
				var urlBuilder_ = new System.Text.StringBuilder();
				urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/users/create" );

				var client_ = _httpClient;
				var disposeClient_ = false;
				try
				{
					using ( var request_ = new System.Net.Http.HttpRequestMessage() )
					{
						var json_ = Newtonsoft.Json.JsonConvert.SerializeObject( body, _settings.Value );
						var content_ = new System.Net.Http.StringContent( json_ );
						content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse( "application/json" );
						request_.Content = content_;
						request_.Method = new System.Net.Http.HttpMethod( "POST" );
						request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "application/json" ) );

						PrepareRequest( client_, request_, urlBuilder_ );

						var url_ = urlBuilder_.ToString();
						request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

						PrepareRequest( client_, request_, url_ );

						var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
						var disposeResponse_ = true;
						try
						{
							var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
							if ( response_.Content != null && response_.Content.Headers != null )
							{
								foreach ( var item_ in response_.Content.Headers )
									headers_[item_.Key] = item_.Value;
							}

							ProcessResponse( client_, response_ );

							var status_ = (int)response_.StatusCode;
							if ( status_ == 200 )
							{
								var objectResponse_ = await ReadObjectResponseAsync<CreateUserResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
								if ( objectResponse_.Object == null )
								{
									throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
								}
								return objectResponse_.Object;
							}
							else
							if ( status_ == 400 )
							{
								var objectResponse_ = await ReadObjectResponseAsync<CreateUserResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
								if ( objectResponse_.Object == null )
								{
									throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
								}
								throw new ApiException<CreateUserResponse>( "Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null );
							}
							else
							{
								var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
								throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
							}
						}
						finally
						{
							if ( disposeResponse_ )
								response_.Dispose();
						}
					}
				}
				finally
				{
					if ( disposeClient_ )
						client_.Dispose();
				}
			}

			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual System.Threading.Tasks.Task<UpdateUserResponse> Update3Async( UpdateUserRequest body )
			{
				return Update3Async( body, System.Threading.CancellationToken.None );
			}

			/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual async System.Threading.Tasks.Task<UpdateUserResponse> Update3Async( UpdateUserRequest body, System.Threading.CancellationToken cancellationToken )
			{
				var urlBuilder_ = new System.Text.StringBuilder();
				urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/users/update" );

				var client_ = _httpClient;
				var disposeClient_ = false;
				try
				{
					using ( var request_ = new System.Net.Http.HttpRequestMessage() )
					{
						var json_ = Newtonsoft.Json.JsonConvert.SerializeObject( body, _settings.Value );
						var content_ = new System.Net.Http.StringContent( json_ );
						content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse( "application/json" );
						request_.Content = content_;
						request_.Method = new System.Net.Http.HttpMethod( "PUT" );
						request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "application/json" ) );

						PrepareRequest( client_, request_, urlBuilder_ );

						var url_ = urlBuilder_.ToString();
						request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

						PrepareRequest( client_, request_, url_ );

						var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
						var disposeResponse_ = true;
						try
						{
							var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
							if ( response_.Content != null && response_.Content.Headers != null )
							{
								foreach ( var item_ in response_.Content.Headers )
									headers_[item_.Key] = item_.Value;
							}

							ProcessResponse( client_, response_ );

							var status_ = (int)response_.StatusCode;
							if ( status_ == 200 )
							{
								var objectResponse_ = await ReadObjectResponseAsync<UpdateUserResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
								if ( objectResponse_.Object == null )
								{
									throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
								}
								return objectResponse_.Object;
							}
							else
							if ( status_ == 400 )
							{
								var objectResponse_ = await ReadObjectResponseAsync<UpdateUserResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
								if ( objectResponse_.Object == null )
								{
									throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
								}
								throw new ApiException<UpdateUserResponse>( "Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null );
							}
							else
							{
								var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
								throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
							}
						}
						finally
						{
							if ( disposeResponse_ )
								response_.Dispose();
						}
					}
				}
				finally
				{
					if ( disposeClient_ )
						client_.Dispose();
				}
			}

			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual System.Threading.Tasks.Task<DeleteUserResponse> Delete3Async( System.Guid userId )
			{
				return Delete3Async( userId, System.Threading.CancellationToken.None );
			}

			/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual async System.Threading.Tasks.Task<DeleteUserResponse> Delete3Async( System.Guid userId, System.Threading.CancellationToken cancellationToken )
			{
				if ( userId == null )
					throw new System.ArgumentNullException( "userId" );

				var urlBuilder_ = new System.Text.StringBuilder();
				urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/users/delete/{userId}" );
				urlBuilder_.Replace( "{userId}", System.Uri.EscapeDataString( ConvertToString( userId, System.Globalization.CultureInfo.InvariantCulture ) ) );

				var client_ = _httpClient;
				var disposeClient_ = false;
				try
				{
					using ( var request_ = new System.Net.Http.HttpRequestMessage() )
					{
						request_.Method = new System.Net.Http.HttpMethod( "DELETE" );
						request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "application/json" ) );

						PrepareRequest( client_, request_, urlBuilder_ );

						var url_ = urlBuilder_.ToString();
						request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

						PrepareRequest( client_, request_, url_ );

						var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
						var disposeResponse_ = true;
						try
						{
							var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
							if ( response_.Content != null && response_.Content.Headers != null )
							{
								foreach ( var item_ in response_.Content.Headers )
									headers_[item_.Key] = item_.Value;
							}

							ProcessResponse( client_, response_ );

							var status_ = (int)response_.StatusCode;
							if ( status_ == 200 )
							{
								var objectResponse_ = await ReadObjectResponseAsync<DeleteUserResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
								if ( objectResponse_.Object == null )
								{
									throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
								}
								return objectResponse_.Object;
							}
							else
							if ( status_ == 400 )
							{
								var objectResponse_ = await ReadObjectResponseAsync<DeleteUserResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
								if ( objectResponse_.Object == null )
								{
									throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
								}
								throw new ApiException<DeleteUserResponse>( "Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null );
							}
							else
							{
								var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
								throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
							}
						}
						finally
						{
							if ( disposeResponse_ )
								response_.Dispose();
						}
					}
				}
				finally
				{
					if ( disposeClient_ )
						client_.Dispose();
				}
			}

			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual System.Threading.Tasks.Task<GetWalletsResponse> WalletsAsync( System.Guid? userId, string symbol, System.DateTime? dateFrom, System.DateTime? dateTo, string market )
			{
				return WalletsAsync( userId, symbol, dateFrom, dateTo, market, System.Threading.CancellationToken.None );
			}

			/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual async System.Threading.Tasks.Task<GetWalletsResponse> WalletsAsync( System.Guid? userId, string symbol, System.DateTime? dateFrom, System.DateTime? dateTo, string market, System.Threading.CancellationToken cancellationToken )
			{
				var urlBuilder_ = new System.Text.StringBuilder();
				urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/wallets?" );
				if ( userId != null )
				{
					urlBuilder_.Append( System.Uri.EscapeDataString( "UserId" ) + "=" ).Append( System.Uri.EscapeDataString( ConvertToString( userId, System.Globalization.CultureInfo.InvariantCulture ) ) ).Append( "&" );
				}
				if ( symbol != null )
				{
					urlBuilder_.Append( System.Uri.EscapeDataString( "Symbol" ) + "=" ).Append( System.Uri.EscapeDataString( ConvertToString( symbol, System.Globalization.CultureInfo.InvariantCulture ) ) ).Append( "&" );
				}
				if ( dateFrom != null )
				{
					urlBuilder_.Append( System.Uri.EscapeDataString( "DateFrom" ) + "=" ).Append( System.Uri.EscapeDataString( dateFrom.Value.ToString( "s", System.Globalization.CultureInfo.InvariantCulture ) ) ).Append( "&" );
				}
				if ( dateTo != null )
				{
					urlBuilder_.Append( System.Uri.EscapeDataString( "DateTo" ) + "=" ).Append( System.Uri.EscapeDataString( dateTo.Value.ToString( "s", System.Globalization.CultureInfo.InvariantCulture ) ) ).Append( "&" );
				}
				if ( market != null )
				{
					urlBuilder_.Append( System.Uri.EscapeDataString( "Market" ) + "=" ).Append( System.Uri.EscapeDataString( ConvertToString( market, System.Globalization.CultureInfo.InvariantCulture ) ) ).Append( "&" );
				}
				urlBuilder_.Length--;

				var client_ = _httpClient;
				var disposeClient_ = false;
				try
				{
					using ( var request_ = new System.Net.Http.HttpRequestMessage() )
					{
						request_.Method = new System.Net.Http.HttpMethod( "GET" );
						request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "application/json" ) );

						PrepareRequest( client_, request_, urlBuilder_ );

						var url_ = urlBuilder_.ToString();
						request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

						PrepareRequest( client_, request_, url_ );

						var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
						var disposeResponse_ = true;
						try
						{
							var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
							if ( response_.Content != null && response_.Content.Headers != null )
							{
								foreach ( var item_ in response_.Content.Headers )
									headers_[item_.Key] = item_.Value;
							}

							ProcessResponse( client_, response_ );

							var status_ = (int)response_.StatusCode;
							if ( status_ == 200 )
							{
								var objectResponse_ = await ReadObjectResponseAsync<GetWalletsResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
								if ( objectResponse_.Object == null )
								{
									throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
								}
								return objectResponse_.Object;
							}
							else
							if ( status_ == 400 )
							{
								var objectResponse_ = await ReadObjectResponseAsync<GetWalletsResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
								if ( objectResponse_.Object == null )
								{
									throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
								}
								throw new ApiException<GetWalletsResponse>( "Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null );
							}
							else
							{
								var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
								throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
							}
						}
						finally
						{
							if ( disposeResponse_ )
								response_.Dispose();
						}
					}
				}
				finally
				{
					if ( disposeClient_ )
						client_.Dispose();
				}
			}

			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual System.Threading.Tasks.Task<GetWalletByIdResponse> Wallets2Async( System.Guid walletId )
			{
				return Wallets2Async( walletId, System.Threading.CancellationToken.None );
			}

			/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual async System.Threading.Tasks.Task<GetWalletByIdResponse> Wallets2Async( System.Guid walletId, System.Threading.CancellationToken cancellationToken )
			{
				if ( walletId == null )
					throw new System.ArgumentNullException( "walletId" );

				var urlBuilder_ = new System.Text.StringBuilder();
				urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/wallets/{walletId}" );
				urlBuilder_.Replace( "{walletId}", System.Uri.EscapeDataString( ConvertToString( walletId, System.Globalization.CultureInfo.InvariantCulture ) ) );

				var client_ = _httpClient;
				var disposeClient_ = false;
				try
				{
					using ( var request_ = new System.Net.Http.HttpRequestMessage() )
					{
						request_.Method = new System.Net.Http.HttpMethod( "GET" );
						request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "application/json" ) );

						PrepareRequest( client_, request_, urlBuilder_ );

						var url_ = urlBuilder_.ToString();
						request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

						PrepareRequest( client_, request_, url_ );

						var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
						var disposeResponse_ = true;
						try
						{
							var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
							if ( response_.Content != null && response_.Content.Headers != null )
							{
								foreach ( var item_ in response_.Content.Headers )
									headers_[item_.Key] = item_.Value;
							}

							ProcessResponse( client_, response_ );

							var status_ = (int)response_.StatusCode;
							if ( status_ == 200 )
							{
								var objectResponse_ = await ReadObjectResponseAsync<GetWalletByIdResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
								if ( objectResponse_.Object == null )
								{
									throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
								}
								return objectResponse_.Object;
							}
							else
							if ( status_ == 400 )
							{
								var objectResponse_ = await ReadObjectResponseAsync<GetWalletByIdResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
								if ( objectResponse_.Object == null )
								{
									throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
								}
								throw new ApiException<GetWalletByIdResponse>( "Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null );
							}
							else
							{
								var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
								throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
							}
						}
						finally
						{
							if ( disposeResponse_ )
								response_.Dispose();
						}
					}
				}
				finally
				{
					if ( disposeClient_ )
						client_.Dispose();
				}
			}

			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual System.Threading.Tasks.Task<CreateWalletResponse> Create4Async( CreateWalletRequest body )
			{
				return Create4Async( body, System.Threading.CancellationToken.None );
			}

			/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual async System.Threading.Tasks.Task<CreateWalletResponse> Create4Async( CreateWalletRequest body, System.Threading.CancellationToken cancellationToken )
			{
				var urlBuilder_ = new System.Text.StringBuilder();
				urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/wallets/create" );

				var client_ = _httpClient;
				var disposeClient_ = false;
				try
				{
					using ( var request_ = new System.Net.Http.HttpRequestMessage() )
					{
						var json_ = Newtonsoft.Json.JsonConvert.SerializeObject( body, _settings.Value );
						var content_ = new System.Net.Http.StringContent( json_ );
						content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse( "application/json" );
						request_.Content = content_;
						request_.Method = new System.Net.Http.HttpMethod( "POST" );
						request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "application/json" ) );

						PrepareRequest( client_, request_, urlBuilder_ );

						var url_ = urlBuilder_.ToString();
						request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

						PrepareRequest( client_, request_, url_ );

						var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
						var disposeResponse_ = true;
						try
						{
							var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
							if ( response_.Content != null && response_.Content.Headers != null )
							{
								foreach ( var item_ in response_.Content.Headers )
									headers_[item_.Key] = item_.Value;
							}

							ProcessResponse( client_, response_ );

							var status_ = (int)response_.StatusCode;
							if ( status_ == 200 )
							{
								var objectResponse_ = await ReadObjectResponseAsync<CreateWalletResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
								if ( objectResponse_.Object == null )
								{
									throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
								}
								return objectResponse_.Object;
							}
							else
							if ( status_ == 400 )
							{
								var objectResponse_ = await ReadObjectResponseAsync<CreateWalletResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
								if ( objectResponse_.Object == null )
								{
									throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
								}
								throw new ApiException<CreateWalletResponse>( "Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null );
							}
							else
							{
								var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
								throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
							}
						}
						finally
						{
							if ( disposeResponse_ )
								response_.Dispose();
						}
					}
				}
				finally
				{
					if ( disposeClient_ )
						client_.Dispose();
				}
			}

			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual System.Threading.Tasks.Task<UpdateWalletResponse> Update4Async( UpdateWalletRequest body )
			{
				return Update4Async( body, System.Threading.CancellationToken.None );
			}

			/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual async System.Threading.Tasks.Task<UpdateWalletResponse> Update4Async( UpdateWalletRequest body, System.Threading.CancellationToken cancellationToken )
			{
				var urlBuilder_ = new System.Text.StringBuilder();
				urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/wallets/update" );

				var client_ = _httpClient;
				var disposeClient_ = false;
				try
				{
					using ( var request_ = new System.Net.Http.HttpRequestMessage() )
					{
						var json_ = Newtonsoft.Json.JsonConvert.SerializeObject( body, _settings.Value );
						var content_ = new System.Net.Http.StringContent( json_ );
						content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse( "application/json" );
						request_.Content = content_;
						request_.Method = new System.Net.Http.HttpMethod( "PUT" );
						request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "application/json" ) );

						PrepareRequest( client_, request_, urlBuilder_ );

						var url_ = urlBuilder_.ToString();
						request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

						PrepareRequest( client_, request_, url_ );

						var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
						var disposeResponse_ = true;
						try
						{
							var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
							if ( response_.Content != null && response_.Content.Headers != null )
							{
								foreach ( var item_ in response_.Content.Headers )
									headers_[item_.Key] = item_.Value;
							}

							ProcessResponse( client_, response_ );

							var status_ = (int)response_.StatusCode;
							if ( status_ == 200 )
							{
								var objectResponse_ = await ReadObjectResponseAsync<UpdateWalletResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
								if ( objectResponse_.Object == null )
								{
									throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
								}
								return objectResponse_.Object;
							}
							else
							if ( status_ == 400 )
							{
								var objectResponse_ = await ReadObjectResponseAsync<UpdateWalletResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
								if ( objectResponse_.Object == null )
								{
									throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
								}
								throw new ApiException<UpdateWalletResponse>( "Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null );
							}
							else
							{
								var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
								throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
							}
						}
						finally
						{
							if ( disposeResponse_ )
								response_.Dispose();
						}
					}
				}
				finally
				{
					if ( disposeClient_ )
						client_.Dispose();
				}
			}

			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual System.Threading.Tasks.Task<DeleteWalletResponse> Delete4Async( System.Guid walletId )
			{
				return Delete4Async( walletId, System.Threading.CancellationToken.None );
			}

			/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual async System.Threading.Tasks.Task<DeleteWalletResponse> Delete4Async( System.Guid walletId, System.Threading.CancellationToken cancellationToken )
			{
				if ( walletId == null )
					throw new System.ArgumentNullException( "walletId" );

				var urlBuilder_ = new System.Text.StringBuilder();
				urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/wallets/delete/{walletId}" );
				urlBuilder_.Replace( "{walletId}", System.Uri.EscapeDataString( ConvertToString( walletId, System.Globalization.CultureInfo.InvariantCulture ) ) );

				var client_ = _httpClient;
				var disposeClient_ = false;
				try
				{
					using ( var request_ = new System.Net.Http.HttpRequestMessage() )
					{
						request_.Method = new System.Net.Http.HttpMethod( "DELETE" );
						request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "application/json" ) );

						PrepareRequest( client_, request_, urlBuilder_ );

						var url_ = urlBuilder_.ToString();
						request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

						PrepareRequest( client_, request_, url_ );

						var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
						var disposeResponse_ = true;
						try
						{
							var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
							if ( response_.Content != null && response_.Content.Headers != null )
							{
								foreach ( var item_ in response_.Content.Headers )
									headers_[item_.Key] = item_.Value;
							}

							ProcessResponse( client_, response_ );

							var status_ = (int)response_.StatusCode;
							if ( status_ == 200 )
							{
								var objectResponse_ = await ReadObjectResponseAsync<DeleteWalletResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
								if ( objectResponse_.Object == null )
								{
									throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
								}
								return objectResponse_.Object;
							}
							else
							if ( status_ == 400 )
							{
								var objectResponse_ = await ReadObjectResponseAsync<DeleteWalletResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
								if ( objectResponse_.Object == null )
								{
									throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
								}
								throw new ApiException<DeleteWalletResponse>( "Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null );
							}
							else
							{
								var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
								throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
							}
						}
						finally
						{
							if ( disposeResponse_ )
								response_.Dispose();
						}
					}
				}
				finally
				{
					if ( disposeClient_ )
						client_.Dispose();
				}
			}

			protected struct ObjectResponseResult<T>
			{
				public ObjectResponseResult( T responseObject, string responseText )
				{
					this.Object = responseObject;
					this.Text = responseText;
				}

				public T Object { get; }

				public string Text { get; }
			}

			public bool ReadResponseAsString { get; set; }

			protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>( System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken )
			{
				if ( response == null || response.Content == null )
				{
					return new ObjectResponseResult<T>( default( T ), string.Empty );
				}

				if ( ReadResponseAsString )
				{
					var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait( false );
					try
					{
						var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>( responseText, JsonSerializerSettings );
						return new ObjectResponseResult<T>( typedBody, responseText );
					}
					catch ( Newtonsoft.Json.JsonException exception )
					{
						var message = "Could not deserialize the response body string as " + typeof( T ).FullName + ".";
						throw new ApiException( message, (int)response.StatusCode, responseText, headers, exception );
					}
				}
				else
				{
					try
					{
						using ( var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait( false ) )
						using ( var streamReader = new System.IO.StreamReader( responseStream ) )
						using ( var jsonTextReader = new Newtonsoft.Json.JsonTextReader( streamReader ) )
						{
							var serializer = Newtonsoft.Json.JsonSerializer.Create( JsonSerializerSettings );
							var typedBody = serializer.Deserialize<T>( jsonTextReader );
							return new ObjectResponseResult<T>( typedBody, string.Empty );
						}
					}
					catch ( Newtonsoft.Json.JsonException exception )
					{
						var message = "Could not deserialize the response body stream as " + typeof( T ).FullName + ".";
						throw new ApiException( message, (int)response.StatusCode, string.Empty, headers, exception );
					}
				}
			}

			private string ConvertToString( object value, System.Globalization.CultureInfo cultureInfo )
			{
				if ( value == null )
				{
					return "";
				}

				if ( value is System.Enum )
				{
					var name = System.Enum.GetName( value.GetType(), value );
					if ( name != null )
					{
						var field = System.Reflection.IntrospectionExtensions.GetTypeInfo( value.GetType() ).GetDeclaredField( name );
						if ( field != null )
						{
							var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute( field, typeof( System.Runtime.Serialization.EnumMemberAttribute ) )
								as System.Runtime.Serialization.EnumMemberAttribute;
							if ( attribute != null )
							{
								return attribute.Value != null ? attribute.Value : name;
							}
						}

						var converted = System.Convert.ToString( System.Convert.ChangeType( value, System.Enum.GetUnderlyingType( value.GetType() ), cultureInfo ) );
						return converted == null ? string.Empty : converted;
					}
				}
				else if ( value is bool )
				{
					return System.Convert.ToString( (bool)value, cultureInfo ).ToLowerInvariant();
				}
				else if ( value is byte[] )
				{
					return System.Convert.ToBase64String( (byte[])value );
				}
				else if ( value.GetType().IsArray )
				{
					var array = System.Linq.Enumerable.OfType<object>( (System.Array)value );
					return string.Join( ",", System.Linq.Enumerable.Select( array, o => ConvertToString( o, cultureInfo ) ) );
				}

				var result = System.Convert.ToString( value, cultureInfo );
				return result == null ? "" : result;
			}
		}

		[System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))" )]
		public partial class CreatePositionRequest
		{
			[Newtonsoft.Json.JsonProperty( "userId",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public System.Guid UserId { get; set; }

			[Newtonsoft.Json.JsonProperty( "tradesId",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public System.Guid TradesId { get; set; }

			[Newtonsoft.Json.JsonProperty( "price",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public double Price { get; set; }

			[Newtonsoft.Json.JsonProperty( "symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public string Symbol { get; set; }

			[Newtonsoft.Json.JsonProperty( "count",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public double Count { get; set; }

			[Newtonsoft.Json.JsonProperty( "side",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			[Newtonsoft.Json.JsonConverter( typeof( Newtonsoft.Json.Converters.StringEnumConverter ) )]
			public Side Side { get; set; }

			[Newtonsoft.Json.JsonProperty( "positionStatus",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			[Newtonsoft.Json.JsonConverter( typeof( Newtonsoft.Json.Converters.StringEnumConverter ) )]
			public PositionStatus PositionStatus { get; set; }

			[Newtonsoft.Json.JsonProperty( "createdDate",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public System.DateTime? CreatedDate { get; set; }

		}

		[System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))" )]
		public partial class CreatePositionResponse
		{
			[Newtonsoft.Json.JsonProperty( "success",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public bool Success { get; set; }

			[Newtonsoft.Json.JsonProperty( "data",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public System.Guid Data { get; set; }

		}

		[System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))" )]
		public partial class CreateTradeRequest
		{
			[Newtonsoft.Json.JsonProperty( "userId",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public System.Guid UserId { get; set; }

			[Newtonsoft.Json.JsonProperty( "price",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public double Price { get; set; }

			[Newtonsoft.Json.JsonProperty( "count",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public double Count { get; set; }

			[Newtonsoft.Json.JsonProperty( "orderType",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			[Newtonsoft.Json.JsonConverter( typeof( Newtonsoft.Json.Converters.StringEnumConverter ) )]
			public OrderType OrderType { get; set; }

			[Newtonsoft.Json.JsonProperty( "side",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			[Newtonsoft.Json.JsonConverter( typeof( Newtonsoft.Json.Converters.StringEnumConverter ) )]
			public Side Side { get; set; }

			[Newtonsoft.Json.JsonProperty( "symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public string Symbol { get; set; }

			[Newtonsoft.Json.JsonProperty( "orderStatus",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			[Newtonsoft.Json.JsonConverter( typeof( Newtonsoft.Json.Converters.StringEnumConverter ) )]
			public OrderStatus OrderStatus { get; set; }

			[Newtonsoft.Json.JsonProperty( "timeInForce",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			[Newtonsoft.Json.JsonConverter( typeof( Newtonsoft.Json.Converters.StringEnumConverter ) )]
			public TimeInForce TimeInForce { get; set; }

			[Newtonsoft.Json.JsonProperty( "createdDate",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public System.DateTime? CreatedDate { get; set; }

		}

		[System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))" )]
		public partial class CreateTradeResponse
		{
			[Newtonsoft.Json.JsonProperty( "success",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public bool Success { get; set; }

			[Newtonsoft.Json.JsonProperty( "data",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public System.Guid Data { get; set; }

		}

		[System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))" )]
		public partial class CreateUserRequest
		{
			[Newtonsoft.Json.JsonProperty( "username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public string Username { get; set; }

			[Newtonsoft.Json.JsonProperty( "login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public string Login { get; set; }

			[Newtonsoft.Json.JsonProperty( "password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public string Password { get; set; }

			[Newtonsoft.Json.JsonProperty( "createdDate",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public System.DateTime? CreatedDate { get; set; }

			[Newtonsoft.Json.JsonProperty( "refferalFrom",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public System.Guid RefferalFrom { get; set; }

		}

		[System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))" )]
		public partial class CreateUserResponse
		{
			[Newtonsoft.Json.JsonProperty( "success",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public bool Success { get; set; }

			[Newtonsoft.Json.JsonProperty( "data",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public System.Guid Data { get; set; }

		}

		[System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))" )]
		public partial class CreateWalletRequest
		{
			[Newtonsoft.Json.JsonProperty( "userId",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public System.Guid UserId { get; set; }

			[Newtonsoft.Json.JsonProperty( "symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public string Symbol { get; set; }

			[Newtonsoft.Json.JsonProperty( "balance",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public double Balance { get; set; }

			[Newtonsoft.Json.JsonProperty( "market", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public string Market { get; set; }

		}

		[System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))" )]
		public partial class CreateWalletResponse
		{
			[Newtonsoft.Json.JsonProperty( "success",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public bool Success { get; set; }

			[Newtonsoft.Json.JsonProperty( "data",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public System.Guid Data { get; set; }

		}

		[System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))" )]
		public partial class DeletePositionResponse
		{
			[Newtonsoft.Json.JsonProperty( "success",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public bool Success { get; set; }

			[Newtonsoft.Json.JsonProperty( "data",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public System.Guid Data { get; set; }

		}

		[System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))" )]
		public partial class DeleteTradeResponse
		{
			[Newtonsoft.Json.JsonProperty( "success",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public bool Success { get; set; }

			[Newtonsoft.Json.JsonProperty( "data",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public System.Guid Data { get; set; }

		}

		[System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))" )]
		public partial class DeleteUserResponse
		{
			[Newtonsoft.Json.JsonProperty( "success",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public bool Success { get; set; }

			[Newtonsoft.Json.JsonProperty( "data",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public System.Guid Data { get; set; }

		}

		[System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))" )]
		public partial class DeleteWalletResponse
		{
			[Newtonsoft.Json.JsonProperty( "success",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public bool Success { get; set; }

			[Newtonsoft.Json.JsonProperty( "data",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public System.Guid Data { get; set; }

		}

		[System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))" )]
		public partial class GetPositionByIdResponse
		{
			[Newtonsoft.Json.JsonProperty( "success",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public bool Success { get; set; }

			[Newtonsoft.Json.JsonProperty( "data",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public PositionEntity Data { get; set; }

		}

		[System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))" )]
		public partial class GetPositionsResponse
		{
			[Newtonsoft.Json.JsonProperty( "success",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public bool Success { get; set; }

			[Newtonsoft.Json.JsonProperty( "data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public System.Collections.Generic.ICollection<PositionEntity> Data { get; set; }

		}

		[System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))" )]
		public partial class GetTradeByIdResponse
		{
			[Newtonsoft.Json.JsonProperty( "success",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public bool Success { get; set; }

			[Newtonsoft.Json.JsonProperty( "data",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public TradeEntity Data { get; set; }

		}

		[System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))" )]
		public partial class GetTradesResponse
		{
			[Newtonsoft.Json.JsonProperty( "success",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public bool Success { get; set; }

			[Newtonsoft.Json.JsonProperty( "data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public System.Collections.Generic.ICollection<TradeEntity> Data { get; set; }

		}

		[System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))" )]
		public partial class GetUserByIdResponse
		{
			[Newtonsoft.Json.JsonProperty( "success",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public bool Success { get; set; }

			[Newtonsoft.Json.JsonProperty( "data",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public UserEntity Data { get; set; }

		}

		[System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))" )]
		public partial class GetUsersRequest
		{

		}

		[System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))" )]
		public partial class GetUsersResponse
		{
			[Newtonsoft.Json.JsonProperty( "success",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public bool Success { get; set; }

			[Newtonsoft.Json.JsonProperty( "data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public System.Collections.Generic.ICollection<UserEntity> Data { get; set; }

		}

		[System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))" )]
		public partial class GetWalletByIdResponse
		{
			[Newtonsoft.Json.JsonProperty( "success",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public bool Success { get; set; }

			[Newtonsoft.Json.JsonProperty( "data",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public WalletEntity Data { get; set; }

		}

		[System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))" )]
		public partial class GetWalletsResponse
		{
			[Newtonsoft.Json.JsonProperty( "success",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public bool Success { get; set; }

			[Newtonsoft.Json.JsonProperty( "data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public System.Collections.Generic.ICollection<WalletEntity> Data { get; set; }

		}

		[System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))" )]
		public enum OrderStatus
		{

			[System.Runtime.Serialization.EnumMember( Value = @"Created" )]
			Created = 0,

			[System.Runtime.Serialization.EnumMember( Value = @"New" )]
			New = 1,

			[System.Runtime.Serialization.EnumMember( Value = @"Rejected" )]
			Rejected = 2,

			[System.Runtime.Serialization.EnumMember( Value = @"PartiallyFilled" )]
			PartiallyFilled = 3,

			[System.Runtime.Serialization.EnumMember( Value = @"Filled" )]
			Filled = 4,

			[System.Runtime.Serialization.EnumMember( Value = @"PendingCancel" )]
			PendingCancel = 5,

			[System.Runtime.Serialization.EnumMember( Value = @"Cancelled" )]
			Cancelled = 6,

			[System.Runtime.Serialization.EnumMember( Value = @"Untriggered" )]
			Untriggered = 7,

			[System.Runtime.Serialization.EnumMember( Value = @"Deactivated" )]
			Deactivated = 8,

			[System.Runtime.Serialization.EnumMember( Value = @"Triggered" )]
			Triggered = 9,

			[System.Runtime.Serialization.EnumMember( Value = @"Active" )]
			Active = 10,

		}

		[System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))" )]
		public enum OrderType
		{

			[System.Runtime.Serialization.EnumMember( Value = @"Limit" )]
			Limit = 0,

			[System.Runtime.Serialization.EnumMember( Value = @"Market" )]
			Market = 1,

		}

		[System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))" )]
		public partial class PositionEntity
		{
			[Newtonsoft.Json.JsonProperty( "id",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public System.Guid Id { get; set; }

			[Newtonsoft.Json.JsonProperty( "user",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public UserEntity User { get; set; }

			[Newtonsoft.Json.JsonProperty( "userId",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public System.Guid UserId { get; set; }

			[Newtonsoft.Json.JsonProperty( "trade",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public TradeEntity Trade { get; set; }

			[Newtonsoft.Json.JsonProperty( "tradeId",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public System.Guid TradeId { get; set; }

			[Newtonsoft.Json.JsonProperty( "price",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public double Price { get; set; }

			[Newtonsoft.Json.JsonProperty( "symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public string Symbol { get; set; }

			[Newtonsoft.Json.JsonProperty( "count",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public double Count { get; set; }

			[Newtonsoft.Json.JsonProperty( "side",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			[Newtonsoft.Json.JsonConverter( typeof( Newtonsoft.Json.Converters.StringEnumConverter ) )]
			public Side Side { get; set; }

			[Newtonsoft.Json.JsonProperty( "positionStatus",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			[Newtonsoft.Json.JsonConverter( typeof( Newtonsoft.Json.Converters.StringEnumConverter ) )]
			public PositionStatus PositionStatus { get; set; }

			[Newtonsoft.Json.JsonProperty( "createdDate",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public System.DateTime? CreatedDate { get; set; }

		}

		[System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))" )]
		public enum PositionStatus
		{

			[System.Runtime.Serialization.EnumMember( Value = @"Normal" )]
			Normal = 0,

			[System.Runtime.Serialization.EnumMember( Value = @"Liq" )]
			Liq = 1,

			[System.Runtime.Serialization.EnumMember( Value = @"Adl" )]
			Adl = 2,

		}

		[System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))" )]
		public enum Side
		{

			[System.Runtime.Serialization.EnumMember( Value = @"Buy" )]
			Buy = 0,

			[System.Runtime.Serialization.EnumMember( Value = @"Sell" )]
			Sell = 1,

		}

		[System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))" )]
		public enum TimeInForce
		{

			[System.Runtime.Serialization.EnumMember( Value = @"GoodTillCancel" )]
			GoodTillCancel = 0,

			[System.Runtime.Serialization.EnumMember( Value = @"ImmediateOrCancel" )]
			ImmediateOrCancel = 1,

			[System.Runtime.Serialization.EnumMember( Value = @"FillOrKill" )]
			FillOrKill = 2,

			[System.Runtime.Serialization.EnumMember( Value = @"PostOnly" )]
			PostOnly = 3,

		}

		[System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))" )]
		public partial class TradeEntity
		{
			[Newtonsoft.Json.JsonProperty( "id",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public System.Guid Id { get; set; }

			[Newtonsoft.Json.JsonProperty( "user",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public UserEntity User { get; set; }

			[Newtonsoft.Json.JsonProperty( "userId",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public System.Guid UserId { get; set; }

			[Newtonsoft.Json.JsonProperty( "price",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public double Price { get; set; }

			[Newtonsoft.Json.JsonProperty( "count",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public double Count { get; set; }

			[Newtonsoft.Json.JsonProperty( "orderType",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			[Newtonsoft.Json.JsonConverter( typeof( Newtonsoft.Json.Converters.StringEnumConverter ) )]
			public OrderType OrderType { get; set; }

			[Newtonsoft.Json.JsonProperty( "side",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			[Newtonsoft.Json.JsonConverter( typeof( Newtonsoft.Json.Converters.StringEnumConverter ) )]
			public Side Side { get; set; }

			[Newtonsoft.Json.JsonProperty( "symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public string Symbol { get; set; }

			[Newtonsoft.Json.JsonProperty( "orderStatus",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			[Newtonsoft.Json.JsonConverter( typeof( Newtonsoft.Json.Converters.StringEnumConverter ) )]
			public OrderStatus OrderStatus { get; set; }

			[Newtonsoft.Json.JsonProperty( "timeInForce",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			[Newtonsoft.Json.JsonConverter( typeof( Newtonsoft.Json.Converters.StringEnumConverter ) )]
			public TimeInForce TimeInForce { get; set; }

			[Newtonsoft.Json.JsonProperty( "createdDate",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public System.DateTime? CreatedDate { get; set; }

		}

		[System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))" )]
		public partial class UpdatePositionRequest
		{
			[Newtonsoft.Json.JsonProperty( "id",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public System.Guid Id { get; set; }

			[Newtonsoft.Json.JsonProperty( "userId",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public System.Guid UserId { get; set; }

			[Newtonsoft.Json.JsonProperty( "tradesId",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public System.Guid TradesId { get; set; }

			[Newtonsoft.Json.JsonProperty( "price",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public double Price { get; set; }

			[Newtonsoft.Json.JsonProperty( "symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public string Symbol { get; set; }

			[Newtonsoft.Json.JsonProperty( "count",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public double Count { get; set; }

			[Newtonsoft.Json.JsonProperty( "side",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			[Newtonsoft.Json.JsonConverter( typeof( Newtonsoft.Json.Converters.StringEnumConverter ) )]
			public Side Side { get; set; }

			[Newtonsoft.Json.JsonProperty( "positionStatus",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			[Newtonsoft.Json.JsonConverter( typeof( Newtonsoft.Json.Converters.StringEnumConverter ) )]
			public PositionStatus PositionStatus { get; set; }

			[Newtonsoft.Json.JsonProperty( "createdDate",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public System.DateTime? CreatedDate { get; set; }

		}

		[System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))" )]
		public partial class UpdatePositionResponse
		{
			[Newtonsoft.Json.JsonProperty( "success",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public bool Success { get; set; }

			[Newtonsoft.Json.JsonProperty( "data",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public PositionEntity Data { get; set; }

		}

		[System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))" )]
		public partial class UpdateTradeRequest
		{
			[Newtonsoft.Json.JsonProperty( "id",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public System.Guid Id { get; set; }

			[Newtonsoft.Json.JsonProperty( "userId",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public System.Guid UserId { get; set; }

			[Newtonsoft.Json.JsonProperty( "price",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public double Price { get; set; }

			[Newtonsoft.Json.JsonProperty( "count",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public double Count { get; set; }

			[Newtonsoft.Json.JsonProperty( "orderType",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			[Newtonsoft.Json.JsonConverter( typeof( Newtonsoft.Json.Converters.StringEnumConverter ) )]
			public OrderType OrderType { get; set; }

			[Newtonsoft.Json.JsonProperty( "side",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			[Newtonsoft.Json.JsonConverter( typeof( Newtonsoft.Json.Converters.StringEnumConverter ) )]
			public Side Side { get; set; }

			[Newtonsoft.Json.JsonProperty( "symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public string Symbol { get; set; }

			[Newtonsoft.Json.JsonProperty( "orderStatus",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			[Newtonsoft.Json.JsonConverter( typeof( Newtonsoft.Json.Converters.StringEnumConverter ) )]
			public OrderStatus OrderStatus { get; set; }

			[Newtonsoft.Json.JsonProperty( "timeInForce",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			[Newtonsoft.Json.JsonConverter( typeof( Newtonsoft.Json.Converters.StringEnumConverter ) )]
			public TimeInForce TimeInForce { get; set; }

			[Newtonsoft.Json.JsonProperty( "createdDate",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public System.DateTime? CreatedDate { get; set; }

		}

		[System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))" )]
		public partial class UpdateTradeResponse
		{
			[Newtonsoft.Json.JsonProperty( "success",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public bool Success { get; set; }

			[Newtonsoft.Json.JsonProperty( "data",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public TradeEntity Data { get; set; }

		}

		[System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))" )]
		public partial class UpdateUserRequest
		{
			[Newtonsoft.Json.JsonProperty( "id",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public System.Guid Id { get; set; }

			[Newtonsoft.Json.JsonProperty( "username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public string Username { get; set; }

			[Newtonsoft.Json.JsonProperty( "login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public string Login { get; set; }

			[Newtonsoft.Json.JsonProperty( "password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public string Password { get; set; }

			[Newtonsoft.Json.JsonProperty( "createdDate",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public System.DateTime? CreatedDate { get; set; }

			[Newtonsoft.Json.JsonProperty( "refferalFrom",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public System.Guid RefferalFrom { get; set; }

		}

		[System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))" )]
		public partial class UpdateUserResponse
		{
			[Newtonsoft.Json.JsonProperty( "success",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public bool Success { get; set; }

			[Newtonsoft.Json.JsonProperty( "data",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public UserEntity Data { get; set; }

		}

		[System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))" )]
		public partial class UpdateWalletRequest
		{
			[Newtonsoft.Json.JsonProperty( "id",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public System.Guid Id { get; set; }

			[Newtonsoft.Json.JsonProperty( "userId",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public System.Guid UserId { get; set; }

			[Newtonsoft.Json.JsonProperty( "symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public string Symbol { get; set; }

			[Newtonsoft.Json.JsonProperty( "balance",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public double Balance { get; set; }

			[Newtonsoft.Json.JsonProperty( "market", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public string Market { get; set; }

			[Newtonsoft.Json.JsonProperty( "dateOfRecording",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public System.DateTime? DateOfRecording { get; set; }

		}

		[System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))" )]
		public partial class UpdateWalletResponse
		{
			[Newtonsoft.Json.JsonProperty( "success",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public bool Success { get; set; }

			[Newtonsoft.Json.JsonProperty( "data",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public WalletEntity Data { get; set; }

		}

		[System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))" )]
		public partial class UserEntity
		{
			[Newtonsoft.Json.JsonProperty( "id",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public System.Guid Id { get; set; }

			[Newtonsoft.Json.JsonProperty( "username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public string Username { get; set; }

			[Newtonsoft.Json.JsonProperty( "login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public string Login { get; set; }

			[Newtonsoft.Json.JsonProperty( "password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public string Password { get; set; }

			[Newtonsoft.Json.JsonProperty( "createdDate",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public System.DateTime? CreatedDate { get; set; }

			[Newtonsoft.Json.JsonProperty( "refferalFrom",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public System.Guid RefferalFrom { get; set; }

		}

		[System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))" )]
		public partial class WalletEntity
		{
			[Newtonsoft.Json.JsonProperty( "id",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public System.Guid Id { get; set; }

			[Newtonsoft.Json.JsonProperty( "user",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public UserEntity User { get; set; }

			[Newtonsoft.Json.JsonProperty( "userId",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public System.Guid UserId { get; set; }

			[Newtonsoft.Json.JsonProperty( "symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public string Symbol { get; set; }

			[Newtonsoft.Json.JsonProperty( "market", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public string Market { get; set; }

			[Newtonsoft.Json.JsonProperty( "dateOfRecording",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public System.DateTime? DateOfRecording { get; set; }

			[Newtonsoft.Json.JsonProperty( "balance",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public double Balance { get; set; }

			[Newtonsoft.Json.JsonProperty( "dateOfCreate",  NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore )]
			public System.DateTime? DateOfCreate { get; set; }

		}



		[System.CodeDom.Compiler.GeneratedCode( "NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))" )]
		public partial class ApiException : System.Exception
		{
			public int StatusCode { get; private set; }

			public string Response { get; private set; }

			public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

			public ApiException( string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException )
				: base( message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ( ( response == null ) ? "(null)" : response.Substring( 0, response.Length >= 512 ? 512 : response.Length ) ), innerException )
			{
				StatusCode = statusCode;
				Response = response;
				Headers = headers;
			}

			public override string ToString()
			{
				return string.Format( "HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString() );
			}
		}

		[System.CodeDom.Compiler.GeneratedCode( "NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))" )]
		public partial class ApiException<TResult> : ApiException
		{
			public TResult Result { get; private set; }

			public ApiException( string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException )
				: base( message, statusCode, response, headers, innerException )
			{
				Result = result;
			}
		}

	}

#pragma warning restore 108
#pragma warning restore 114
#pragma warning restore 472
#pragma warning restore 612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
}
